# This is the configuration file for the graph database agent
#
# It fulfills a few functions:
# 1. A flow to do periodic registration of this agent with the orchestrator
# 2. A flow to process action requests and produce action responses
#    This requires a custom component to process the action requests

# It also provides:
# - Natural language to Cypher query conversion
# - Query execution against multiple database types (Neo4j, TBD)
# - Results in multiple formats (YAML, JSON, CSV, Markdown)

---
log:
  stdout_log_level: INFO
  log_file_level: DEBUG # default INFO
  log_file: solace_ai_connector.log

shared_config:
  - broker_config: &broker_connection
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}
      temporary_queue: ${USE_TEMPORARY_QUEUES, false}

flows:
  # Flow to handle action requests
  - name: {{SNAKE_CASE_NAME}}_action_request_processor
    components:
      # Input from a Solace broker
      - component_name: broker_input
        component_module: broker_input
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}agent_graph_database_action_request
          broker_subscriptions:
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/actionRequest/*/*/{{SNAKE_CASE_NAME}}/>
              qos: 1

      # Custom component to process the action request
      - component_name: action_request_processor
         # path is completed at build time
        component_module: {{MODULE_DIRECTORY}}.agents.graph_database.graph_database_agent_component
        component_config:
          llm_service_topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/llm-service/request/general-good/
          embedding_service_topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/embedding-service/request/text/
          agent_name: {{SNAKE_CASE_NAME}}
          db_type: ${{{SNAKE_UPPER_CASE_NAME}}_DB_TYPE}
          host: ${{{SNAKE_UPPER_CASE_NAME}}_DB_HOST}
          port: ${{{SNAKE_UPPER_CASE_NAME}}SQL_DB_PORT}
          user: ${{{SNAKE_UPPER_CASE_NAME}}_DB_USER}
          password: ${{{SNAKE_UPPER_CASE_NAME}}_DB_PASSWORD}
          database: ${{{SNAKE_UPPER_CASE_NAME}}_DB_NAME}
          query_timeout: ${{{SNAKE_UPPER_CASE_NAME}}_QUERY_TIMEOUT, 30}
          database_purpose: ${{{SNAKE_UPPER_CASE_NAME}}_DB_PURPOSE}
          data_description: ${{{SNAKE_UPPER_CASE_NAME}}_DB_DESCRIPTION}
          auto_detect_schema: true
        broker_request_response:
          enabled: true
          broker_config: *broker_connection
          request_expiry_ms: 120000
          payload_encoding: utf-8
          payload_format: json
          response_topic_prefix: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1
          response_queue_prefix: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1
        component_input:
          source_expression: input.payload

      # Output to a Solace broker
      - component_name: broker_output
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true
